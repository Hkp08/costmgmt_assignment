# Application CI/CD Pipeline

parameters:
- name: deployEnvironment
  displayName: Environment to deploy
  type: string
  default: 'dev'
  values:
  - 'dev'
  - 'prod'

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src/**

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build Function App'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
        addToPath: true
    
    - task:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd src
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pytest
      displayName: 'Install dependencies and run tests'
      
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/function-app.zip'
      displayName: 'Archive Function App'
      
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Function App Artifact'

- stage: DeployToDev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  condition: and(succeeded(), or(eq('${{ parameters.deployEnvironment }}', 'dev'), eq('${{ parameters.deployEnvironment }}', 'all')))
  jobs:
  - job: DeployDevJob
    displayName: 'Deploy to Dev Environment'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Function App Artifact'
      
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: 'Azure-Service-Connection'
        appType: 'functionApp'
        appName: 'billing-records-dev-function'
        package: '$(System.ArtifactsDirectory)/drop/function-app.zip'
        deploymentMethod: 'auto'
      displayName: 'Deploy Function App to Dev'

- stage: DeployToProd
  displayName: 'Deploy to Production'
  dependsOn: DeployToDev
  condition: and(succeeded(), or(eq('${{ parameters.deployEnvironment }}', 'prod'), eq('${{ parameters.deployEnvironment }}', 'all')))
  jobs:
  - job: ApprovalJob
    displayName: 'Approval for Production Deployment'
    pool: server
    timeoutInMinutes: 4320 # 3 days
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: ''
        instructions: 'Please approve the deployment to production'
        onTimeout: 'reject'
  
  - job: DeployProdJob
    displayName: 'Deploy to Production Environment'
    dependsOn: ApprovalJob
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Function App Artifact'
      
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: 'Azure-Service-Connection'
        appType: 'functionApp'
        appName: 'billing-records-prod-function'
        package: '$(System.ArtifactsDirectory)/drop/function-app.zip'
        deploymentMethod: 'auto'
      displayName: 'Deploy Function App to Production'